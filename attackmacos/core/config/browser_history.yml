procedure_name: browser_history
tactic: Discovery
ttp_id: T1217
guid: 67929a7e-8431-4893-a4e1-5a6743c5605d
intent: Extract browser history from Safari, Chrome, Firefox, and Brave on macOS.
author: '@darmado | https://x.com/darmad0'
version: 2.0.3
created: '2025-05-27'
updated: '2025-06-03'
detection:
- ioc: Event ID 10
- ioc: binary.exe spawned
- analysis: ''
- rule_sigma: ''
- rule_block: ''
resources:
- link: ''
- link: ''
- link: ''
acknowledgement:
- person: Daniel A.
  handle: '@darmad0'
platform:
- macOS
procedure:
  arguments:
  - option: -s|--safari
    description: Extract Safari history
    execute_function:
    - query_safari_history
  - option: -c|--chrome
    description: Extract Chrome history
    execute_function:
    - query_chrome_history
  - option: -f|--firefox
    description: Extract Firefox history
    execute_function:
    - query_firefox_history
  - option: -b|--brave
    description: Extract Brave history
    execute_function:
    - query_brave_history
  - option: --search
    description: Search for specific terms in history
    type: string
    input_required: true
    argument_required: false
    execute_function: []
  - option: --last
    description: Last N days to search
    input_required: true
    type: integer
    execute_function: []
  - option: --starttime
    description: Start time in YY-MM-DD HH:MM:SS format
    input_required: true
    type: string
    execute_function: []
  - option: --endtime
    description: End time in YY-MM-DD HH:MM:SS format
    input_required: true
    type: string
    execute_function: []
  global_variable:
  - name: INPUT_LAST
    type: integer
    default_value: 7
  - name: INPUT_SEARCH
    type: string
    default_value: ''
  - name: CMD_SQLITE3
    type: string
    default_value: sqlite3
  - name: DB_HISTORY_SAFARI
    type: string
    default_value: $HOME/Library/Safari/History.db
  - name: DB_HISTORY_CHROME
    type: string
    default_value: $HOME/Library/Application Support/Google/Chrome/Default/History
  - name: CMD_QUERY_BROWSER_DB
    type: string
    default_value: $CMD_SQLITE3 -separator '|'
  - name: DB_HISTORY_BRAVE
    type: string
    default_value: $HOME/Library/Application Support/BraveSoftware/Brave-Browser/Default/History
  - name: DB_HISTORY_FIREFOX
    type: string
    default_value: $HOME/Library/Application Support/Firefox/Profiles/*.default-release/places.sqlite
  - name: SAFARI_HDB_QUERY
    type: string
    default_value: "WITH headers AS ( SELECT 'source' as source, 'domain' as domain, 'title' as title,  'visit_date' as visit_date, 'url' as url, 'visit_count' as visit_count ) SELECT * FROM headers UNION ALL SELECT  'Safari' as source, hi.domain_expansion as domain, hv.title, datetime(hv.visit_time + 978307200, 'unixepoch', 'localtime') as visit_date, hi.url, hi.visit_count FROM history_items hi JOIN history_visits hv ON hi.id = hv.history_item WHERE hv.visit_time > (strftime('%s', 'now') - 978307200 - (\\$INPUT_LAST * 86400)) \\$INPUT_SEARCH ORDER BY visit_date DESC"
  - name: CHROME_HDB_QUERY
    type: string
    default_value: "WITH headers AS ( SELECT 'source' as source, 'url' as url, 'title' as title,  'visit_date' as visit_date, 'visit_count' as visit_count ) SELECT * FROM headers UNION ALL SELECT  'Chrome' as source, url, title, datetime(last_visit_time/1000000 + (strftime('%s', '1601-01-01')), 'unixepoch', 'localtime') as last_visit, visit_count FROM urls WHERE last_visit_time > ((strftime('%s', 'now') - \\$INPUT_LAST * 86400) * 1000000) \\$INPUT_SEARCH ORDER BY last_visit DESC"
  - name: FIREFOX_HDB_QUERY
    type: string
    default_value: "WITH headers AS ( SELECT 'source' as source, 'url' as url, 'title' as title,  'visit_date' as visit_date, 'visit_count' as visit_count ) SELECT * FROM headers UNION ALL SELECT  'Firefox' as source, url, title, datetime(last_visit_date/1000000, 'unixepoch', 'localtime') as last_visit, visit_count FROM moz_places WHERE last_visit_date > ((strftime('%s', 'now') - \\$INPUT_LAST * 86400) * 1000000) \\$INPUT_SEARCH ORDER BY last_visit DESC"
  - name: BRAVE_HDB_QUERY
    type: string
    default_value: "WITH headers AS ( SELECT 'source' as source, 'url' as url, 'title' as title,  'visit_date' as visit_date, 'visit_count' as visit_count ) SELECT * FROM headers UNION ALL SELECT  'Brave' as source, url, title, datetime(last_visit_time/1000000 + (strftime('%s', '1601-01-01')), 'unixepoch', 'localtime') as last_visit, visit_count FROM urls WHERE last_visit_time > ((strftime('%s', 'now') - \\$INPUT_LAST * 86400) * 1000000) \\$INPUT_SEARCH ORDER BY last_visit DESC LIMIT 1000"
  functions:
  - name: query_safari_history
    type: main
    execute_condition:
      global_variable: DB_HISTORY_SAFARI
      exists: true
    language:
    - shell
    opsec:
      check_fda:
        enabled: true
        exit_on_failure: true
      check_permission:
        type: file
        path: ${DB_HISTORY_SAFARI}
        read: true
        write: false
        execute: false
        exit_on_failure: true
    code: |
      query_safari_history() {
          # Build search clause locally like the working script
          local search_clause=""
          if [ -n "$INPUT_SEARCH" ]; then
              local input_search_escaped="${INPUT_SEARCH//\'/\'\'}"
              search_clause="AND (hi.url LIKE '%${input_search_escaped}%' OR hi.domain_expansion LIKE '%${input_search_escaped}%' OR hv.title LIKE '%${input_search_escaped}%')"
          fi

          # Use the exact pattern from the working script
          local query="${SAFARI_HDB_QUERY//\$INPUT_LAST/$INPUT_LAST}"
          local query_final="${query//\$INPUT_SEARCH/$search_clause}"

          local result=$(query_browser_db "$DB_HISTORY_SAFARI" "$query_final")
          core_debug_print "Query result length: ${#result} characters"
          printf "%s\n" "$result"
          return 0
      }
  - name: query_chrome_history
    type: main
    execute_condition:
      global_variable: DB_HISTORY_CHROME
      exists: true
    language:
    - shell
    opsec:
      check_fda:
        enabled: true
        exit_on_failure: true
      check_permission:
        type: file
        path: ${DB_HISTORY_CHROME}
        read: true
        write: false
        execute: false
        exit_on_failure: true
    code: |
      query_chrome_history() {
          local search_clause=""
          if [ -n "$INPUT_SEARCH" ]; then
              local input_search_escaped="${INPUT_SEARCH//\'/\'\'}"
              search_clause="AND (url LIKE '%${input_search_escaped}%' OR title LIKE '%${input_search_escaped}%')"
          fi

          local query="${CHROME_HDB_QUERY//\$INPUT_LAST/$INPUT_LAST}"
          local query_final="${query//\$INPUT_SEARCH/$search_clause}"
          
          core_debug_print "Executing Chrome history query"
          
          local result=$(query_browser_db "$DB_HISTORY_CHROME" "$query_final")
          printf "%s\n" "$result"
          return 0
      }
  - name: query_firefox_history
    type: main
    execute_condition:
      global_variable: DB_HISTORY_FIREFOX
      exists: true
    language:
    - shell
    opsec:
      check_fda:
        enabled: true
        exit_on_failure: true
      check_permission:
        type: file
        path: ${DB_HISTORY_FIREFOX}
        read: true
        write: false
        execute: false
        exit_on_failure: true
      check_db_lock:
        enabled: true
        database_path: ${DB_HISTORY_FIREFOX}
        exit_on_failure: true
        error_message: Firefox database is locked - close Firefox browser first
    code: |
      query_firefox_history() {
          local firefox_db=$(resolve_firefox_db)

          local search_clause=""
          if [ -n "$INPUT_SEARCH" ]; then
              local input_search_escaped="${INPUT_SEARCH//\'/\'\'}"
              search_clause="AND (url LIKE '%${input_search_escaped}%' OR title LIKE '%${input_search_escaped}%')"
          fi

          local query="${FIREFOX_HDB_QUERY//\$INPUT_LAST/$INPUT_LAST}"
          local query_final="${query//\$INPUT_SEARCH/$search_clause}"
          
          core_debug_print "Executing Firefox history query"
          
          local result=$(query_browser_db "$firefox_db" "$query_final")
          printf "%s\n" "$result"
          return 0
      }
  - name: query_brave_history
    type: main
    execute_condition:
      global_variable: DB_HISTORY_BRAVE
      exists: true
    language:
    - shell
    opsec:
      check_fda:
        enabled: true
        exit_on_failure: true
      check_permission:
        type: file
        path: ${DB_HISTORY_BRAVE}
        read: true
        write: false
        execute: false
        exit_on_failure: false
    code: |
      query_brave_history() {
          local search_clause=""
          if [ -n "$INPUT_SEARCH" ]; then
              local input_search_escaped="${INPUT_SEARCH//\'/\'\'}"
              search_clause="AND (url LIKE '%${input_search_escaped}%' OR title LIKE '%${input_search_escaped}%')"
          fi

          # Use the exact pattern from the working script
          local query="${BRAVE_HDB_QUERY//\$INPUT_LAST/$INPUT_LAST}"
          local query_final="${query//\$INPUT_SEARCH/$search_clause}"
          
          core_debug_print "Executing Brave history query"
          
          local result=$(query_browser_db "$DB_HISTORY_BRAVE" "$query_final")
          printf "%s\n" "$result"
          return 0
      }
  - name: resolve_firefox_db
    type: helper
    language:
    - shell
    opsec:
      check_fda:
        enabled: false
    code: |
      resolve_firefox_db() {
          ls "$HOME/Library/Application Support/Firefox/Profiles/"*.default-release/places.sqlite 2>/dev/null | head -n 1
          return $?
      }
  - name: query_browser_db
    type: helper
    language:
    - shell
    opsec:
      check_fda:
        enabled: false
    code: |
      query_browser_db() {
          local db="$1"
          local query="$2"
          local db_name=$(basename "$db")
          
          core_debug_print "=== Database Query Debug ==="
          core_debug_print "Database: '$db'"
          core_debug_print "Command: '$CMD_QUERY_BROWSER_DB'"
          core_debug_print "Full command: $CMD_QUERY_BROWSER_DB '$db' '$query'"
          core_debug_print "Executing query..."
          
          # Execute query and capture both stdout and stderr
          local result
          local error_output
          error_output=$($CMD_QUERY_BROWSER_DB "$db" "$query" 2>&1)
          local exit_code=$?
          
          if [ $exit_code -ne 0 ]; then
              # Check if it's a database lock error
              if echo "$error_output" | grep -q "database is locked"; then
                  core_handle_error "Database '$db_name' is locked - close the browser first or wait for it to finish"
              elif echo "$error_output" | grep -q "no such file"; then
                  core_handle_error "Database file not found: '$db'"
              elif echo "$error_output" | grep -q "permission denied"; then
                  core_handle_error "Permission denied accessing database: '$db_name'"
              else
                  core_handle_error "Database query failed for '$db_name': $error_output"
              fi
              return $exit_code
          fi
          
          # Output the result if successful
          echo "$error_output"
          return 0
      }
