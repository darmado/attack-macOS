---
# Template Version: 1.0.0
# Last Modified: 2025-03-19
# Author: @darmado | https://x.com/darmad0
# License: Apache 2.0
# Repository: https://github.com/darmado/attack-macOS
# Description: Template for defining MITRE ATT&CK procedures for macOS
# Dependencies: None

# Required fields
procedure_name: ""  # Name of the procedure
tactic: ""          # MITRE ATT&CK Tactic
ttp_id: ""          # MITRE ATT&CK TTP ID (e.g., T1087)
guid: $GUID.        # GUID VAR. is used by the build tool after tests pass.
intent: ""          # Purpose and goal of the procedure
author: ""         # Author name and contact
created: ""        # Creation date (YYYY-MM-DD)
updated: $UPDATED  # UPDATED VAR. is used by the build tool after tests pass.
version: ""        # Semantic versioning (e.g., 1.0.0)


# Optional fields

platform: []       # Supported platforms (e.g., ["macOS", "iOS"])

# Optional detection section
detection:         # Detection and monitoring capabilities
  - ioc: ""        # Indicator of Compromise
    analysis: ""   # Analysis methodology
    rule_sigma: "" # Sigma rule for detection
    rule_elastic: "" # Elastic detection rule
    rule_splunk: ""  # Splunk detection rule
    rule_block: ""   # Blocking rule

# Optional resources section  
resources:         # Reference materials and documentation
  - link: ""       # URL to resource
    description: "" # Resource description

# Optional acknowledgement section
acknowledgement:   # Credits and acknowledgements
  - person: ""     # Person name
    handle: ""     # Social media handle

# Required procedure section
procedure:         # Core procedure definition
  arguments:       # Command-line arguments
    - option: ""   # Argument name (must use --long format only)
      description: "" # Argument description (5-100 chars)
      type: ""     # Argument type (string|integer) - only for input_required arguments
      option_required: false # Whether option is required
      input_required: false  # Whether argument accepts user.arg (creates INPUT_* variable)
                            # Set to true for arguments like --gatekeeper enable/disable
                            # Requires corresponding INPUT_* global variable
                            # Naming: --gatekeeper → INPUT_GATEKEEPER
                            #         --appfw-defaults → INPUT_APPFW_DEFAULTS
      input_values: []      # Valid input values for validation (optional)
      argument_required: false # Whether argument is required
      execute_function: []  # Functions to execute

  global_variable: # Global variables
    - name: ""     # Variable name (UPPER_CASE format)
                   # For input_required arguments, create INPUT_* variables:
                   # INPUT_GATEKEEPER, INPUT_APPFW, INPUT_SETBLOCKALL, etc.
      type: ""     # Variable type (string|integer|boolean|array)
      default_value: "" # Default value (use '' for empty INPUT_* variables)
      array_elements: [] # Array elements if applicable

  functions:       # Procedure functions
    - name: ""     # Function name
      type: ""     # Function type
      language: [] # Supported languages (cmd, sh, bash, zsh, python, powershell, javascript, JXA, go)
      sudo_required: false # Whether function commands require sudo privileges (build script auto-adds $CMD_SUDO)
      execute_condition: # Execution conditions
        global_variable: "" # Required global variable
        exists: false      # Whether variable must exist
      opsec:       # Operational security checks
        check_fda: # File system access checks
          enabled: false   # Enable FDA checks
          exit_on_failure: true # Exit on failure
        check_permission: # Permission checks
          type: ""        # Permission type
          path: ""        # Path to check
          read: false     # Read permission required
          write: false    # Write permission required
          execute: false  # Execute permission required
          exit_on_failure: true # Exit on failure
        check_db_lock:    # Database lock checks
          enabled: false  # Enable DB lock checks
          database_path: "" # Database path
          exit_on_failure: true # Exit on failure
          error_message: "" # Error message
      code: |      # Function code 
