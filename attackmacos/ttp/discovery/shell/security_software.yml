---
procedure_name: "security_software"
ttp_id: "T1518"
tactic: "Discovery"
guid: "456e7890-e12b-34c5-d678-901234567890"
intent: "Comprehensive security software discovery for macOS systems including EDR, AV, firewalls, and built-in protections"
author: "@darmado | https://x.com/darmad0"
version: "2.0.0"
created: "2025-01-27"

procedure:
  arguments:
    # EDR Detection Arguments
    - option: "--edr"
      description: "Discover all EDR solutions (processes, applications, launch items)"
      execute_function:
        - discover_edr_all
        
    - option: "--edr-ps"
      description: "Check for EDR processes using ps with tactical intelligence"
      execute_function:
        - discover_edr_processes
        
    - option: "--edr-info"
      description: "Get detailed EDR application and launch item information"
      execute_function:
        - discover_edr_info
        
    # Security Application Categories
    - option: "--av"
      description: "Discover antivirus products"
      execute_function:
        - discover_av_all
        
    - option: "--ost"
      description: "Discover Objective-See security tools"
      execute_function:
        - discover_ost_apps
        
    - option: "--mrt-apps"
      description: "Discover malware removal tools"
      execute_function:
        - discover_mrt_apps
        
    - option: "--log-forwarder"
      description: "Discover log forwarding applications"
      execute_function:
        - discover_logforward_apps
        
    - option: "--vpn"
      description: "Discover VPN applications"
      execute_function:
        - discover_vpn_apps
        
    - option: "--hids"
      description: "Discover Host-based Intrusion Detection Systems"
      execute_function:
        - discover_hids_apps
        
    # macOS Built-in Security Controls
    - option: "--tcc"
      description: "Check TCC database and permissions"
      execute_function:
        - discover_tcc_info
        
    - option: "--gatekeeper"
      description: "Check Gatekeeper status and code signing policies"
      execute_function:
        - discover_gatekeeper_info
        
    - option: "--xprotect"
      description: "Check XProtect malware detection service"
      execute_function:
        - discover_xprotect_info
        
    - option: "--mrt"
      description: "Check Malware Removal Tool service"
      execute_function:
        - discover_mrt_info
        
    - option: "--firewall"
      description: "Check macOS Application Firewall configuration"
      execute_function:
        - discover_firewall_info
        
    - option: "--quarantine"
      description: "Check File Quarantine system status"
      execute_function:
        - discover_quarantine_info

  global_variable:
    # EDR Process Patterns
    - name: EDR_PATTERN
      type: string
      default_value: "(sentinel|crowdstrike|carbonblack|cylance|endgame|cortex|defender|bitdefender|sophos|kaspersky|trend|symantec|mcafee|norton|avast|avg|malwarebytes|eset|f-secure|panda|webroot|avira|gdata|emsisoft)"
    
    # Security Application Patterns
    - name: AV_PATTERN
      type: string
      default_value: "(antivirus|anti-virus|defender|bitdefender|sophos|kaspersky|trend|symantec|mcafee|norton|avast|avg|malwarebytes|eset|f-secure|panda|webroot|avira|gdata|emsisoft)"
      
    - name: OST_PATTERN
      type: string
      default_value: "(lulu|blockblock|knockknock|reikey|whatsyoursign|processmonitor|filesetup|netiquette|oversight|dnsmonitor|taskexplorer)"
      
    - name: MRT_PATTERN
      type: string
      default_value: "(mrt|malware.removal|xprotect|yara|clamav|maldet)"
      
    - name: LOGFORWARD_PATTERN
      type: string
      default_value: "(splunk|elastic|logstash|fluentd|rsyslog|syslog|graylog|sumo|datadog|newrelic)"
      
    - name: VPN_PATTERN
      type: string
      default_value: "(vpn|openvpn|wireguard|tunnelblick|viscosity|nordvpn|expressvpn|surfshark|cyberghost|purevpn)"
      
    - name: HIDS_PATTERN
      type: string
      default_value: "(hids|ossec|samhain|aide|tripwire|rkhunter|chkrootkit|tiger|lynis)"
    
    # TCC Database Paths
    - name: TCC_SYSTEM_DB
      type: string
      default_value: "/Library/Application Support/com.apple.TCC/TCC.db"
      
    - name: TCC_USER_DB
      type: string
      default_value: "$HOME/Library/Application Support/com.apple.TCC/TCC.db"

  functions:
    # EDR Discovery Functions
    - name: discover_edr_all
      type: main
      opsec:
        check_fda:
          enabled: false
      code: |
        discover_edr_all() {
            discover_edr_processes
            raw_output="$raw_output"$'\n'
            discover_edr_info
        }
    
    - name: discover_edr_processes
      type: main
      opsec:
        check_fda:
          enabled: false
      code: |
        discover_edr_processes() {
            local edr_result=$(ps aux | perl -ne "print if /$EDR_PATTERN/i" | head -20)
            if [ -n "$edr_result" ]; then
                $CMD_PRINTF "EDR_PROCESS|active|%s\n" "$edr_result"
            else
                $CMD_PRINTF "EDR_PROCESS|inactive|\n"
            fi
        }
    
    - name: discover_edr_info
      type: main
      opsec:
        check_fda:
          enabled: false
        check_permission:
          type: directory
          path: "/Library/LaunchDaemons"
          read: true
          write: false
          execute: false
          exit_on_failure: false
      code: |
        discover_edr_info() {
            local edr_apps=$(system_profiler SPApplicationsDataType | perl -00 -ne "print if /$EDR_PATTERN/i")
            if [ -n "$edr_apps" ]; then
                $CMD_PRINTF "EDR_APPS|installed|%s\n" "$edr_apps"
            else
                $CMD_PRINTF "EDR_APPS|none|\n"
            fi
            
            # Check launch daemons
            local daemon_result=$(find /Library/LaunchDaemons -name "*.plist" -exec grep -l -i -E "$EDR_PATTERN" {} \; 2>/dev/null)
            if [ -n "$daemon_result" ]; then
                $CMD_PRINTF "EDR_DAEMONS|system|%s\n" "$daemon_result"
            else
                $CMD_PRINTF "EDR_DAEMONS|none|\n"
            fi
            
            # Check launch agents
            local agent_result=$(find /Library/LaunchAgents ~/Library/LaunchAgents -name "*.plist" -exec grep -l -i -E "$EDR_PATTERN" {} \; 2>/dev/null)
            if [ -n "$agent_result" ]; then
                $CMD_PRINTF "EDR_AGENTS|user|%s\n" "$agent_result"
            else
                $CMD_PRINTF "EDR_AGENTS|none|\n"
            fi
        }

    # Generic Security App Discovery Function
    - name: discover_security_apps
      type: helper
      opsec:
        check_fda:
          enabled: false
        check_permission:
          type: directory
          path: "/Library/LaunchDaemons"
          read: true
          write: false
          execute: false
          exit_on_failure: false
      code: |
        discover_security_apps() {
            local category="$1"
            local pattern="$2"
            local output=""
            
            # Get applications from system profiler
            local apps_result=$(system_profiler SPApplicationsDataType | perl -00 -ne "print if /$pattern/i")
            if [ -n "$apps_result" ]; then
                output="${category^^}_APPS|installed|$apps_result"
            else
                output="${category^^}_APPS|none|"
            fi
            
            # Check launch daemons
            local daemon_result=$(find /Library/LaunchDaemons -name "*.plist" -exec grep -l -i -E "$pattern" {} \; 2>/dev/null)
            if [ -n "$daemon_result" ]; then
                output="$output"$'\n'"${category^^}_DAEMONS|system|$daemon_result"
            else
                output="$output"$'\n'"${category^^}_DAEMONS|none|"
            fi
            
            # Check launch agents
            local agent_result=$(find /Library/LaunchAgents ~/Library/LaunchAgents -name "*.plist" -exec grep -l -i -E "$pattern" {} \; 2>/dev/null)
            if [ -n "$agent_result" ]; then
                output="$output"$'\n'"${category^^}_AGENTS|user|$agent_result"
            else
                output="$output"$'\n'"${category^^}_AGENTS|none|"
            fi
            
            $CMD_PRINTF "%s\n" "$output"
        }

    # Security Application Category Functions
    - name: discover_av_all
      type: main
      opsec:
        check_fda:
          enabled: false
      code: |
        discover_av_all() {
            discover_security_apps "antivirus" "$AV_PATTERN"
        }
        
    - name: discover_ost_apps
      type: main
      opsec:
        check_fda:
          enabled: false
      code: |
        discover_ost_apps() {
            discover_security_apps "objective-see" "$OST_PATTERN"
        }
        
    - name: discover_mrt_apps
      type: main
      opsec:
        check_fda:
          enabled: false
      code: |
        discover_mrt_apps() {
            discover_security_apps "malware-removal" "$MRT_PATTERN"
        }
        
    - name: discover_logforward_apps
      type: main
      opsec:
        check_fda:
          enabled: false
      code: |
        discover_logforward_apps() {
            discover_security_apps "log-forwarding" "$LOGFORWARD_PATTERN"
        }
        
    - name: discover_vpn_apps
      type: main
      opsec:
        check_fda:
          enabled: false
      code: |
        discover_vpn_apps() {
            discover_security_apps "vpn" "$VPN_PATTERN"
        }
        
    - name: discover_hids_apps
      type: main
      opsec:
        check_fda:
          enabled: false
      code: |
        discover_hids_apps() {
            discover_security_apps "hids" "$HIDS_PATTERN"
        }

    # macOS Built-in Security Control Functions
    - name: discover_tcc_info
      type: main
      opsec:
        check_fda:
          enabled: true
      code: |
        discover_tcc_info() {
            if pgrep syspolicyd > /dev/null; then
                local tcc_status="TCC_SERVICE|syspolicyd|active"
                if [ -f "$TCC_SYSTEM_DB" ] && [ -r "$TCC_SYSTEM_DB" ]; then
                    local permissions=$($CMD_SQLITE3 "$TCC_SYSTEM_DB" "SELECT client, service, allowed FROM access LIMIT 5" 2>/dev/null)
                    if [ -n "$permissions" ]; then
                        tcc_status="$tcc_status"$'\n'"TCC_PERMISSIONS|system|$permissions"
                    fi
                fi
                $CMD_PRINTF "%s\n" "$tcc_status"
            else
                $CMD_PRINTF "TCC_SERVICE|syspolicyd|inactive\n"
            fi
        }
        
    - name: discover_gatekeeper_info
      type: main
      opsec:
        check_fda:
          enabled: false
      code: |
        discover_gatekeeper_info() {
            local gatekeeper_status=$(spctl --status 2>/dev/null)
            if echo "$gatekeeper_status" | $CMD_GREP -q "enabled"; then
                local assessment=$(spctl --assess --verbose /Applications/Safari.app 2>/dev/null | $CMD_HEAD -3)
                $CMD_PRINTF "GATEKEEPER|enabled|%s\n" "$assessment"
            else
                $CMD_PRINTF "GATEKEEPER|disabled|\n"
            fi
        }
        
    - name: discover_xprotect_info
      type: main
      opsec:
        check_fda:
          enabled: false
      code: |
        discover_xprotect_info() {
            local xprotect_file="/System/Library/CoreServices/XProtect.bundle/Contents/Resources/XProtect.meta.plist"
            if pgrep XProtectService > /dev/null; then
                local version=$(defaults read "$xprotect_file" Version 2>/dev/null || echo "Unknown")
                $CMD_PRINTF "XPROTECT|active|version:%s\n" "$version"
            else
                $CMD_PRINTF "XPROTECT|inactive|\n"
            fi
        }
        
    - name: discover_mrt_info
      type: main
      opsec:
        check_fda:
          enabled: false
      code: |
        discover_mrt_info() {
            local mrt_file="/System/Library/CoreServices/MRT.app/Contents/Info.plist"
            if pgrep MRT > /dev/null; then
                local version=$(defaults read "$mrt_file" CFBundleVersion 2>/dev/null || echo "Unknown")
                $CMD_PRINTF "MRT|active|version:%s\n" "$version"
            else
                $CMD_PRINTF "MRT|inactive|\n"
            fi
        }
        
    - name: discover_firewall_info
      type: main
      opsec:
        check_fda:
          enabled: false
      code: |
        discover_firewall_info() {
            local global_state=$(defaults read /Library/Preferences/com.apple.alf globalstate 2>/dev/null || echo "0")
            if [ "$global_state" = "1" ]; then
                local stealth_mode=$(defaults read /Library/Preferences/com.apple.alf stealthenabled 2>/dev/null || echo "0")
                $CMD_PRINTF "FIREWALL|enabled|stealth:%s\n" "$stealth_mode"
            else
                $CMD_PRINTF "FIREWALL|disabled|\n"
            fi
        }
        
    - name: discover_quarantine_info
      type: main
      opsec:
        check_fda:
          enabled: false
      code: |
        discover_quarantine_info() {
            local downloads_dir="$HOME/Downloads"
            local quarantined_files=0
            
            if [ -d "$downloads_dir" ]; then
                quarantined_files=$(find "$downloads_dir" -type f -exec xattr -l {} \; 2>/dev/null | $CMD_GREP -c "com.apple.quarantine" || echo "0")
                $CMD_PRINTF "QUARANTINE|active|files:%s\n" "$quarantined_files"
            else
                $CMD_PRINTF "QUARANTINE|unknown|files:0\n"
            fi
        } 