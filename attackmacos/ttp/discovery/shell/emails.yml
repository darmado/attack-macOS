---
procedure_name: "emails"
ttp_id: "T1087.003"
tactic: "Discovery"
guid: "8759bb33-b5d2-4a1d-aca6-6a366c95abee"
intent: "Discover email addresses from verified macOS databases containing confirmed email data"
author: "@darmado"
version: "1.0.0"
created: "2025-01-27"
platform:
  - "macOS"

procedure:
  arguments:
    - option: "--messages"
      description: "Extract emails from Apple Messages database"
      execute_function: ["discover_messages_emails"]


    - option: "--entities"
      description: "Extract emails from Apple Suggestions database"
      execute_function: ["discover_entities_emails"]

    - option: "--whatsapp"
      description: "Extract emails from WhatsApp message content"
      execute_function: ["discover_whatsapp_emails"]

    - option: "--all"
      description: "Extract emails from all verified sources"
      execute_function: ["discover_messages_emails", "discover_entities_emails", "discover_whatsapp_emails"]

  global_variable:
    # Input variables for command-line arguments
    - name: "INPUT_DOMAIN"
      type: "string"
      default_value: ""
    
  
    
    # Apple Messages Database - CONFIRMED: 39 emails from handle, message, chat tables
    - name: "DB_MESSAGES"
      type: "string"
      default_value: "$HOME/Library/Messages/chat.db"
    
    # Apple Suggestions Database - CONFIRMED: 125 emails from emailMetadata, contactDetails tables
    - name: "DB_ENTITIES"
      type: "string"
      default_value: "$HOME/Library/Suggestions/entities.db"
    
    # WhatsApp Chat Storage - CONFIRMED: Email addresses in message content (ZTEXT field)
    - name: "DB_WHATSAPP_CHAT"
      type: "string"
      default_value: "$HOME/Library/Group Containers/group.net.whatsapp.WhatsApp.shared/ChatStorage.sqlite"

  functions:
    # Function 1: Extract emails from Messages database using proven msgIntel2.js patterns
    - name: "discover_messages_emails"
      type: "main"
      code: |
        discover_messages_emails() {
            local db_path="${DB_MESSAGES}"
            if [ ! -f "${db_path}" ]; then
              printf "[-] Messages database not found: %s\n" "${db_path}"
              return 1
            fi
            
            printf "[+] Extracting emails from Messages database...\n"
            
            # Extract from handle.id (primary source - 34 emails)
            printf "=== HANDLE.ID EMAILS ===\n"
            sqlite3 "${db_path}" "
            SELECT DISTINCT id as email_address
            FROM handle 
            WHERE id LIKE '%@%' 
            ORDER BY id;" 2>/dev/null
            
            # Extract from message.account (sender accounts - 2 emails with high message counts)
            printf "\n=== MESSAGE.ACCOUNT EMAILS ===\n"
            sqlite3 "${db_path}" "
            SELECT DISTINCT account as email_address
            FROM message 
            WHERE account LIKE '%@%' 
            ORDER BY account;" 2>/dev/null
            
            # Extract from message.destination_caller_id (recipients - 7 emails)
            printf "\n=== DESTINATION_CALLER_ID EMAILS ===\n"
            sqlite3 "${db_path}" "
            SELECT DISTINCT destination_caller_id as email_address
            FROM message 
            WHERE destination_caller_id LIKE '%@%' 
            ORDER BY destination_caller_id;" 2>/dev/null
            
            # Extract from chat.account_login (user credentials - 2 emails)
            printf "\n=== CHAT.ACCOUNT_LOGIN EMAILS ===\n"
            sqlite3 "${db_path}" "
            SELECT DISTINCT account_login as email_address
            FROM chat 
            WHERE account_login LIKE '%@%' 
            ORDER BY account_login;" 2>/dev/null
            
            return 0
        }

    # Function 2: Extract emails from Apple Suggestions entities.db using targeted email fields
    - name: "discover_entities_emails"
      type: "main"
      code: |
        discover_entities_emails() {
            local db_path="${DB_ENTITIES}"
            if [ ! -f "${db_path}" ]; then
              printf "[-] Entities database not found: %s\n" "${db_path}"
              return 1
            fi
            
            printf "[+] Extracting emails from Apple Suggestions entities.db...\n"
            
            # Extract from contactDetails where type=2 (email addresses - 28 emails)
            printf "=== CONTACTDETAILS EMAIL ADDRESSES (type=2) ===\n"
            sqlite3 "${db_path}" "
            SELECT DISTINCT value as email_address
            FROM contactDetails 
            WHERE type = 2 AND value LIKE '%@%'
            ORDER BY value;" 2>/dev/null
            
            # Extract from emailMetadata.author (sender emails with metadata - 28 emails)
            printf "\n=== EMAILMETADATA SENDER EMAILS ===\n"
            sqlite3 "${db_path}" "
            SELECT DISTINCT author as email_address
            FROM emailMetadata 
            WHERE author LIKE '%@%'
            ORDER BY author;" 2>/dev/null
            
            # Extract from emailMetadata.key (message identifiers - 69 emails)
            printf "\n=== EMAILMETADATA KEY FIELD EMAILS ===\n"
            sqlite3 "${db_path}" "
            SELECT DISTINCT 
                CASE 
                    WHEN key LIKE '%iMessage;-;%@%' THEN 
                        SUBSTR(key, INSTR(key, 'iMessage;-;') + 10)
                    ELSE key
                END as email_address
            FROM emailMetadata 
            WHERE key LIKE '%@%'
            ORDER BY email_address;" 2>/dev/null
            
            return 0
        }

    # Function 3: Extract emails from WhatsApp message content
    - name: "discover_whatsapp_emails"
      type: "main"
      code: |
        discover_whatsapp_emails() {
            local db_path="${DB_WHATSAPP_CHAT}"
            if [ ! -f "${db_path}" ]; then
              printf "[-] WhatsApp chat database not found: %s\n" "${db_path}"
              return 1
            fi
            
            printf "[+] Extracting emails from WhatsApp message content...\n"
            
            # Extract email addresses from message text content (ZTEXT field)
            printf "=== WHATSAPP MESSAGE CONTENT EMAILS ===\n"
            sqlite3 "${db_path}" "
            SELECT DISTINCT ZTEXT as message_content
            FROM ZWAMESSAGE 
            WHERE ZTEXT LIKE '%@gmail.%' 
               OR ZTEXT LIKE '%@yahoo.%' 
               OR ZTEXT LIKE '%@hotmail.%' 
               OR ZTEXT LIKE '%@outlook.%' 
               OR ZTEXT LIKE '%@icloud.%'
               OR ZTEXT LIKE '%@apple.%'
               OR (ZTEXT LIKE '%@%.%' 
                   AND ZTEXT NOT LIKE '%@s.whatsapp.net%' 
                   AND ZTEXT NOT LIKE '%@g.us%'
                   AND ZTEXT NOT LIKE '%@media.whatsapp.com%'
                   AND LENGTH(ZTEXT) < 200)
            ORDER BY message_content;" 2>/dev/null
            
            return 0
        }

   