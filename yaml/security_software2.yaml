# Overall Attack Technique Metadata
attack_technique: ""  # Placeholder for MITRE ATT&CK Technique ID
display_name: ""  # Placeholder for a human-readable name of the technique
description: ""  # General description of what the script does

# Define Attack Functions
attack_functions:
  - name: ""  # Generic name of the attack function
    auto_generated_guid: ""  # Unique ID for each function instance
    description: ""  # Description of the function's purpose
    supported_platforms:
      - macOS
    input_arguments:
      argument_name:
        description: "General description of the argument"
        type: string
        default: ""  # Default value or placeholder
      another_argument:
        description: "Another possible argument"
        type: string
        default: ""
    validation_steps:
      - validation_step_1: ""  # Placeholder for the first validation step
      - validation_step_2: ""  # Placeholder for additional validations
    command_sequence:
      - command_step_1  # Generic command execution step
      - command_step_2
    execution_flow:
      log_output: true   # Controls if output should be logged
      encode_output: false  # Controls if output should be encoded
      exfiltrate_data: false  # Controls data exfiltration

# Global Configuration (applied to all attack functions)
global_configuration:
  logging:
    log_file: "/var/log/attack_macos.log"
    log_enabled: true
  execution:
    sudo_mode: false
    encode: "none"
  global_variables:
    ENABLE_LOGGING: false
    ENABLE_EXFIL: false
    ENCODE_METHOD: "none"
    EXFIL_METHOD: "dns"  # Options: "http", "dns"
    ENCRYPTION_ENABLED: false
    ENCRYPTION_KEY: ""
    CHUNK_SIZE: 1000
    OUTPUT_FILE: "/tmp/output.txt"
    # Add any additional universal controls here

# Validation Function Definitions (Generalized for all scripts)
validation_functions:
  - validate_directory_exists:
      description: "Checks if a directory exists."
      command: "[[ -d \"#{directory}\" ]] || { echo \"Directory does not exist.\"; exit 1; }"

  - validate_permissions:
      description: "Validates read/write permissions."
      command: "[[ -r \"#{target_path}\" && -x \"#{target_path}\" ]] || { echo \"Insufficient permissions.\"; exit 1; }"

  - validate_process_name:
      description: "Checks if the process name filter is non-empty."
      command: "[[ ! -z \"#{process_name}\" ]] || { echo \"Process name filter is empty.\"; exit 1; }"

  - validate_dns_resolution:
      description: "Verifies DNS resolution for the specified domain."
      command: "nslookup #{domain_name} || { echo \"DNS resolution failed.\"; exit 1; }"

# Command Definitions (Generalized)
command_definitions:
  CMD_LIST_FILES: "ls -laR #{directory}"
  CMD_PROCESS_LIST: "ps -axrww | grep -v grep | grep --color=always #{process_name}"
  CMD_SYSTEM_PROFILER: "system_profiler SPApplicationsDataType | grep --color=always -A 8"
  CMD_CHUNK_DATA: "chunk_data \"#{data}\""
  CMD_EXFIL_DNS: "exfil_dns \"#{chunked_data}\" \"#{target_domain}\""

# Utility Functions
utility_functions:
  - log_msg  # Generic logging function
  - get_timestamp  # Retrieves the current timestamp
  - execute_command  # Executes a given command
  - validate_input  # Validates input arguments
  - encode_output  # Encodes output data if required
  - chunk_data  # Splits data into smaller chunks
  - exfil_dns  # Executes DNS exfiltration logic
  - exfil_http  # Executes HTTP exfiltration logic
  - get_user  # Retrieves the current user
  - get_system_info  # Fetches system information

# Cleanup Commands
cleanup_commands:
  - name: Clear temporary files
    command: |
      rm -f /tmp/attack_macos_temp_*
