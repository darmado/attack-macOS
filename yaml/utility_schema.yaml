# Base YAML (utility.yaml)

script_metadata:
  name: base_script
  description: Common utilities for security scripts
  version: "1.0"

# Assumptions
assumptions:
  - Global variables are properly set based on user input
  - Utility functions are defined elsewhere
  - Discover functions handle logging internally

# Execution Priority and Logic Flow
execution_priority:
  - validation
  - technique_execution
  - output_processing
  - logging
  - exfiltration

# Function Execution Logic Flow
function_execution:
  validation:
    - condition: EXFIL && EXFIL_METHOD == "dns"
      function: validate_dns
    - condition: ENCODE
      function: validate_encoding
    - condition: ENCRYPT
      function: validate_encryption
    - condition: CHUNK_SIZE
      function: validate_chunk_size
    - condition: SUDO_MODE
      function: validate_sudo_mode
    - condition: VERBOSE
      function: validate_verbose_mode
    - condition: LOG_ENABLED
      function: validate_log_enabled

  technique_execution:
    - condition: EDR
      function: discover_edr
    - condition: AV
      function: discover_av
    - condition: FIREWALL
      function: discover_firewall
    - condition: MRT
      function: discover_mrt
    - condition: GATEKEEPER
      function: discover_gatekeeper

  output_processing:
    - condition: LOG_ENABLED || EXFIL
      logic:
        - LOG_ENABLED: write_output_to_log
        - EXFIL: exfiltrate_data
    - else: print_to_stdout

# Requirements for Main Orchestrator
requirements:
  - main() as high-level orchestrator
  - Centralized logging and exfiltration logic in main()
  - Global variables as switches
  - Utility functions executed by main() based on flow

# Utility and Default Functions
utility_functions:
  log_to_stdout:
    code: |
      log_to_stdout() {
        echo "$1"
      }
  encode_output:
    code: |
      encode_output() {
        case $ENCODE in
          "b64") echo "$1" | base64 ;;
          "hex") echo "$1" | xxd -p ;;
          *) echo "$1" ;;
        esac
      }
  encrypt_output:
    code: |
      encrypt_output() {
        openssl enc -"$ENCRYPT" -base64 -k "$ENCRYPT_KEY" <<< "$1"
      }
